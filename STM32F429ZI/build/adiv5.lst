ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"adiv5.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.adiv5_ap_write,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	adiv5_ap_write:
  25              	.LFB135:
  26              		.file 1 "Src/adiv5/adiv5.c"
   1:Src/adiv5/adiv5.c **** /*
   2:Src/adiv5/adiv5.c ****  * This file is part of the Black Magic Debug project.
   3:Src/adiv5/adiv5.c ****  *
   4:Src/adiv5/adiv5.c ****  * Copyright (C) 2011  Black Sphere Technologies Ltd.
   5:Src/adiv5/adiv5.c ****  * Written by Gareth McMullin <gareth@blacksphere.co.nz>
   6:Src/adiv5/adiv5.c ****  *
   7:Src/adiv5/adiv5.c ****  * Copyright (C) 2018  Tomasz Michalec <tomasz.michalec1996@gmail.com>
   8:Src/adiv5/adiv5.c ****  *
   9:Src/adiv5/adiv5.c ****  * This program is free software: you can redistribute it and/or modify
  10:Src/adiv5/adiv5.c ****  * it under the terms of the GNU General Public License as published by
  11:Src/adiv5/adiv5.c ****  * the Free Software Foundation, either version 3 of the License, or
  12:Src/adiv5/adiv5.c ****  * (at your option) any later version.
  13:Src/adiv5/adiv5.c ****  *
  14:Src/adiv5/adiv5.c ****  * This program is distributed in the hope that it will be useful,
  15:Src/adiv5/adiv5.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:Src/adiv5/adiv5.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:Src/adiv5/adiv5.c ****  * GNU General Public License for more details.
  18:Src/adiv5/adiv5.c ****  *
  19:Src/adiv5/adiv5.c ****  * You should have received a copy of the GNU General Public License
  20:Src/adiv5/adiv5.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:Src/adiv5/adiv5.c ****  */
  22:Src/adiv5/adiv5.c **** 
  23:Src/adiv5/adiv5.c **** /*
  24:Src/adiv5/adiv5.c ****  * What has been modified by Tomasz Michalec:
  25:Src/adiv5/adiv5.c ****  *   -- Fucntions use new API defined in this project
  26:Src/adiv5/adiv5.c ****  *   -- Use FreeRTOS memory management
  27:Src/adiv5/adiv5.c ****  */
  28:Src/adiv5/adiv5.c **** 
  29:Src/adiv5/adiv5.c **** #include "stm32f4xx_it.h"
  30:Src/adiv5/adiv5.c **** #include "cmsis_os.h"
  31:Src/adiv5/adiv5.c **** #include "adiv5/adiv5.h"
  32:Src/adiv5/adiv5.c **** #include "jtag/jtag_scan.h"
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 2


  33:Src/adiv5/adiv5.c **** #include "cortexm/cortexm.h"
  34:Src/adiv5/adiv5.c **** 
  35:Src/adiv5/adiv5.c **** static void adiv5_ap_priv_free(ADIv5_AP_t *this)
  36:Src/adiv5/adiv5.c **** {
  37:Src/adiv5/adiv5.c ****   this->priv->dp->ap_count--;
  38:Src/adiv5/adiv5.c ****   if(!this->priv->dp->ap_count) {
  39:Src/adiv5/adiv5.c ****     this->priv->dp->ops->priv_free(this->priv->dp);
  40:Src/adiv5/adiv5.c ****   }
  41:Src/adiv5/adiv5.c ****   vPortFree(this->priv);
  42:Src/adiv5/adiv5.c ****   vPortFree(this);
  43:Src/adiv5/adiv5.c **** }
  44:Src/adiv5/adiv5.c **** 
  45:Src/adiv5/adiv5.c **** inline static void adiv5_select_ap(ADIv5_AP_PRIV_t *ap, uint8_t addr)
  46:Src/adiv5/adiv5.c **** {
  47:Src/adiv5/adiv5.c ****   ap->dp->ops->dp_write(ap->dp->priv, ADIV5_DP_SELECT,
  48:Src/adiv5/adiv5.c ****       ((uint32_t)ap->apsel << 24)|(addr & 0xF0));
  49:Src/adiv5/adiv5.c **** }
  50:Src/adiv5/adiv5.c **** 
  51:Src/adiv5/adiv5.c **** inline static void adiv5_dp_write_ap(ADIv5_DP_t *dp, uint8_t addr, uint32_t value)
  52:Src/adiv5/adiv5.c **** {
  53:Src/adiv5/adiv5.c ****   dp->ops->low_access(dp->priv, ADIV5_LOW_AP, ADIV5_LOW_WRITE, addr, value);
  54:Src/adiv5/adiv5.c **** }
  55:Src/adiv5/adiv5.c **** 
  56:Src/adiv5/adiv5.c **** inline static uint32_t adiv5_dp_read_ap(ADIv5_DP_t *dp, uint8_t addr)
  57:Src/adiv5/adiv5.c **** {
  58:Src/adiv5/adiv5.c ****   uint32_t ret;
  59:Src/adiv5/adiv5.c **** 
  60:Src/adiv5/adiv5.c ****   dp->ops->low_access(dp->priv, ADIV5_LOW_AP, ADIV5_LOW_READ, addr, 0);
  61:Src/adiv5/adiv5.c ****   ret = dp->ops->low_access(dp->priv, ADIV5_LOW_DP, ADIV5_LOW_READ, ADIV5_DP_RDBUFF, 0);
  62:Src/adiv5/adiv5.c **** 
  63:Src/adiv5/adiv5.c ****   return ret;
  64:Src/adiv5/adiv5.c **** }
  65:Src/adiv5/adiv5.c **** 
  66:Src/adiv5/adiv5.c **** static void adiv5_ap_write(ADIv5_AP_PRIV_t *ap, uint8_t addr, uint32_t value)
  67:Src/adiv5/adiv5.c **** {
  27              		.loc 1 67 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 20
  35              		.cfi_offset 4, -20
  36              		.cfi_offset 5, -16
  37              		.cfi_offset 6, -12
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 83B0     		sub	sp, sp, #12
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 32
  43 0004 0446     		mov	r4, r0
  44 0006 0D46     		mov	r5, r1
  45 0008 1646     		mov	r6, r2
  46              	.LVL1:
  47              	.LBB8:
  48              	.LBB9:
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 3


  47:Src/adiv5/adiv5.c ****       ((uint32_t)ap->apsel << 24)|(addr & 0xF0));
  49              		.loc 1 47 0
  50 000a 0368     		ldr	r3, [r0]
  51 000c 5A68     		ldr	r2, [r3, #4]
  52              	.LVL2:
  53 000e 1768     		ldr	r7, [r2]
  48:Src/adiv5/adiv5.c **** }
  54              		.loc 1 48 0
  55 0010 0179     		ldrb	r1, [r0, #4]	@ zero_extendqisi2
  56              	.LVL3:
  57 0012 05F0F002 		and	r2, r5, #240
  47:Src/adiv5/adiv5.c ****       ((uint32_t)ap->apsel << 24)|(addr & 0xF0));
  58              		.loc 1 47 0
  59 0016 42EA0162 		orr	r2, r2, r1, lsl #24
  60 001a 0821     		movs	r1, #8
  61 001c 9868     		ldr	r0, [r3, #8]
  62              	.LVL4:
  63 001e B847     		blx	r7
  64              	.LVL5:
  65              	.LBE9:
  66              	.LBE8:
  68:Src/adiv5/adiv5.c ****   adiv5_select_ap(ap, addr);
  69:Src/adiv5/adiv5.c **** 	
  70:Src/adiv5/adiv5.c ****   adiv5_dp_write_ap(ap->dp, addr, value);
  67              		.loc 1 70 0
  68 0020 2368     		ldr	r3, [r4]
  69              	.LVL6:
  70              	.LBB10:
  71              	.LBB11:
  53:Src/adiv5/adiv5.c **** }
  72              		.loc 1 53 0
  73 0022 5A68     		ldr	r2, [r3, #4]
  74 0024 D468     		ldr	r4, [r2, #12]
  75              	.LVL7:
  76 0026 9868     		ldr	r0, [r3, #8]
  77 0028 0096     		str	r6, [sp]
  78 002a 2B46     		mov	r3, r5
  79              	.LVL8:
  80 002c 0022     		movs	r2, #0
  81 002e 0121     		movs	r1, #1
  82 0030 A047     		blx	r4
  83              	.LVL9:
  84              	.LBE11:
  85              	.LBE10:
  71:Src/adiv5/adiv5.c **** }
  86              		.loc 1 71 0
  87 0032 03B0     		add	sp, sp, #12
  88              	.LCFI2:
  89              		.cfi_def_cfa_offset 20
  90              		@ sp needed
  91 0034 F0BD     		pop	{r4, r5, r6, r7, pc}
  92              		.cfi_endproc
  93              	.LFE135:
  95              		.section	.text.adiv5_ap_read,"ax",%progbits
  96              		.align	1
  97              		.syntax unified
  98              		.thumb
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 4


  99              		.thumb_func
 100              		.fpu fpv4-sp-d16
 102              	adiv5_ap_read:
 103              	.LFB136:
  72:Src/adiv5/adiv5.c **** 
  73:Src/adiv5/adiv5.c **** static uint32_t adiv5_ap_read(ADIv5_AP_PRIV_t *ap, uint8_t addr)
  74:Src/adiv5/adiv5.c **** {
 104              		.loc 1 74 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              	.LVL10:
 109 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 110              	.LCFI3:
 111              		.cfi_def_cfa_offset 20
 112              		.cfi_offset 4, -20
 113              		.cfi_offset 5, -16
 114              		.cfi_offset 6, -12
 115              		.cfi_offset 7, -8
 116              		.cfi_offset 14, -4
 117 0002 83B0     		sub	sp, sp, #12
 118              	.LCFI4:
 119              		.cfi_def_cfa_offset 32
 120 0004 0446     		mov	r4, r0
 121 0006 0E46     		mov	r6, r1
 122              	.LVL11:
 123              	.LBB16:
 124              	.LBB17:
  47:Src/adiv5/adiv5.c ****       ((uint32_t)ap->apsel << 24)|(addr & 0xF0));
 125              		.loc 1 47 0
 126 0008 0368     		ldr	r3, [r0]
 127 000a 5A68     		ldr	r2, [r3, #4]
 128 000c 1568     		ldr	r5, [r2]
  48:Src/adiv5/adiv5.c **** }
 129              		.loc 1 48 0
 130 000e 0179     		ldrb	r1, [r0, #4]	@ zero_extendqisi2
 131              	.LVL12:
 132 0010 06F0F002 		and	r2, r6, #240
  47:Src/adiv5/adiv5.c ****       ((uint32_t)ap->apsel << 24)|(addr & 0xF0));
 133              		.loc 1 47 0
 134 0014 42EA0162 		orr	r2, r2, r1, lsl #24
 135 0018 0821     		movs	r1, #8
 136 001a 9868     		ldr	r0, [r3, #8]
 137              	.LVL13:
 138 001c A847     		blx	r5
 139              	.LVL14:
 140              	.LBE17:
 141              	.LBE16:
  75:Src/adiv5/adiv5.c **** 	uint32_t ret;
  76:Src/adiv5/adiv5.c ****   adiv5_select_ap(ap, addr);
  77:Src/adiv5/adiv5.c **** 	ret = adiv5_dp_read_ap(ap->dp, addr);
 142              		.loc 1 77 0
 143 001e 2468     		ldr	r4, [r4]
 144              	.LVL15:
 145              	.LBB18:
 146              	.LBB19:
  60:Src/adiv5/adiv5.c ****   ret = dp->ops->low_access(dp->priv, ADIV5_LOW_DP, ADIV5_LOW_READ, ADIV5_DP_RDBUFF, 0);
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 5


 147              		.loc 1 60 0
 148 0020 6368     		ldr	r3, [r4, #4]
 149 0022 DF68     		ldr	r7, [r3, #12]
 150 0024 A068     		ldr	r0, [r4, #8]
 151 0026 0025     		movs	r5, #0
 152 0028 0095     		str	r5, [sp]
 153 002a 3346     		mov	r3, r6
 154 002c 0122     		movs	r2, #1
 155 002e 1146     		mov	r1, r2
 156 0030 B847     		blx	r7
 157              	.LVL16:
  61:Src/adiv5/adiv5.c **** 
 158              		.loc 1 61 0
 159 0032 6368     		ldr	r3, [r4, #4]
 160 0034 DE68     		ldr	r6, [r3, #12]
 161              	.LVL17:
 162 0036 A068     		ldr	r0, [r4, #8]
 163 0038 0095     		str	r5, [sp]
 164 003a 0C23     		movs	r3, #12
 165 003c 0122     		movs	r2, #1
 166 003e 2946     		mov	r1, r5
 167 0040 B047     		blx	r6
 168              	.LVL18:
 169              	.LBE19:
 170              	.LBE18:
  78:Src/adiv5/adiv5.c **** 	return ret;
  79:Src/adiv5/adiv5.c **** }
 171              		.loc 1 79 0
 172 0042 03B0     		add	sp, sp, #12
 173              	.LCFI5:
 174              		.cfi_def_cfa_offset 20
 175              		@ sp needed
 176 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 177              		.cfi_endproc
 178              	.LFE136:
 180              		.section	.text.ap_check_error,"ax",%progbits
 181              		.align	1
 182              		.syntax unified
 183              		.thumb
 184              		.thumb_func
 185              		.fpu fpv4-sp-d16
 187              	ap_check_error:
 188              	.LFB137:
  80:Src/adiv5/adiv5.c **** 
  81:Src/adiv5/adiv5.c **** static uint32_t ap_check_error(ADIv5_AP_PRIV_t *ap) {
 189              		.loc 1 81 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 193              	.LVL19:
 194 0000 08B5     		push	{r3, lr}
 195              	.LCFI6:
 196              		.cfi_def_cfa_offset 8
 197              		.cfi_offset 3, -8
 198              		.cfi_offset 14, -4
  82:Src/adiv5/adiv5.c ****   return ap->dp->ops->error(ap->dp->priv);
 199              		.loc 1 82 0
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 6


 200 0002 0368     		ldr	r3, [r0]
 201 0004 5A68     		ldr	r2, [r3, #4]
 202 0006 9268     		ldr	r2, [r2, #8]
 203 0008 9868     		ldr	r0, [r3, #8]
 204              	.LVL20:
 205 000a 9047     		blx	r2
 206              	.LVL21:
  83:Src/adiv5/adiv5.c **** }
 207              		.loc 1 83 0
 208 000c 08BD     		pop	{r3, pc}
 209              		.cfi_endproc
 210              	.LFE137:
 212              		.section	.text.ap_mem_read_words,"ax",%progbits
 213              		.align	1
 214              		.syntax unified
 215              		.thumb
 216              		.thumb_func
 217              		.fpu fpv4-sp-d16
 219              	ap_mem_read_words:
 220              	.LFB138:
  84:Src/adiv5/adiv5.c **** 
  85:Src/adiv5/adiv5.c **** static uint32_t ap_mem_read_words(ADIv5_AP_PRIV_t *ap, uint32_t *dest, uint32_t src, uint32_t len)
  86:Src/adiv5/adiv5.c **** {
 221              		.loc 1 86 0
 222              		.cfi_startproc
 223              		@ args = 0, pretend = 0, frame = 0
 224              		@ frame_needed = 0, uses_anonymous_args = 0
 225              	.LVL22:
 226 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 227              	.LCFI7:
 228              		.cfi_def_cfa_offset 28
 229              		.cfi_offset 4, -28
 230              		.cfi_offset 5, -24
 231              		.cfi_offset 6, -20
 232              		.cfi_offset 7, -16
 233              		.cfi_offset 8, -12
 234              		.cfi_offset 9, -8
 235              		.cfi_offset 14, -4
 236 0004 83B0     		sub	sp, sp, #12
 237              	.LCFI8:
 238              		.cfi_def_cfa_offset 40
 239 0006 0646     		mov	r6, r0
 240 0008 0F46     		mov	r7, r1
 241 000a 1446     		mov	r4, r2
 242              	.LVL23:
  87:Src/adiv5/adiv5.c **** 	uint32_t osrc = src;
  88:Src/adiv5/adiv5.c ****   len >>= 2;
 243              		.loc 1 88 0
 244 000c 9D08     		lsrs	r5, r3, #2
 245              	.LVL24:
  89:Src/adiv5/adiv5.c **** 
  90:Src/adiv5/adiv5.c ****   adiv5_ap_write(ap, ADIV5_AP_CSW, ap->csw | ADIV5_AP_CSW_SIZE_WORD | ADIV5_AP_CSW_ADDRINC_SINGLE);
 246              		.loc 1 90 0
 247 000e 4269     		ldr	r2, [r0, #20]
 248              	.LVL25:
 249 0010 42F01202 		orr	r2, r2, #18
 250 0014 0021     		movs	r1, #0
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 7


 251              	.LVL26:
 252 0016 FFF7FEFF 		bl	adiv5_ap_write
 253              	.LVL27:
  91:Src/adiv5/adiv5.c ****   ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_WRITE, ADIV5_AP_TAR, src);
 254              		.loc 1 91 0
 255 001a 3368     		ldr	r3, [r6]
 256 001c 5A68     		ldr	r2, [r3, #4]
 257 001e D2F80C80 		ldr	r8, [r2, #12]
 258 0022 9868     		ldr	r0, [r3, #8]
 259 0024 0094     		str	r4, [sp]
 260 0026 0423     		movs	r3, #4
 261 0028 0022     		movs	r2, #0
 262 002a 0121     		movs	r1, #1
 263 002c C047     		blx	r8
 264              	.LVL28:
  92:Src/adiv5/adiv5.c ****   ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_READ, ADIV5_AP_DRW, 0);
 265              		.loc 1 92 0
 266 002e 3368     		ldr	r3, [r6]
 267 0030 5A68     		ldr	r2, [r3, #4]
 268 0032 D2F80C80 		ldr	r8, [r2, #12]
 269 0036 9868     		ldr	r0, [r3, #8]
 270 0038 0023     		movs	r3, #0
 271 003a 0093     		str	r3, [sp]
 272 003c 0C23     		movs	r3, #12
 273 003e 0122     		movs	r2, #1
 274 0040 1146     		mov	r1, r2
 275 0042 C047     		blx	r8
 276              	.LVL29:
  87:Src/adiv5/adiv5.c ****   len >>= 2;
 277              		.loc 1 87 0
 278 0044 A046     		mov	r8, r4
 279              	.LVL30:
 280              	.L8:
  93:Src/adiv5/adiv5.c **** 
  94:Src/adiv5/adiv5.c ****   while(--len) {
 281              		.loc 1 94 0
 282 0046 013D     		subs	r5, r5, #1
 283              	.LVL31:
 284 0048 2CD0     		beq	.L12
  95:Src/adiv5/adiv5.c ****     //*dest++ = ...
  96:Src/adiv5/adiv5.c ****     *dest = ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_READ, ADIV5_AP_DRW, 0);
 285              		.loc 1 96 0
 286 004a 3368     		ldr	r3, [r6]
 287 004c 5A68     		ldr	r2, [r3, #4]
 288 004e D2F80C90 		ldr	r9, [r2, #12]
 289 0052 9868     		ldr	r0, [r3, #8]
 290 0054 0023     		movs	r3, #0
 291 0056 0093     		str	r3, [sp]
 292 0058 0C23     		movs	r3, #12
 293 005a 0122     		movs	r2, #1
 294 005c 1146     		mov	r1, r2
 295 005e C847     		blx	r9
 296              	.LVL32:
 297 0060 47F8040B 		str	r0, [r7], #4
 298              	.LVL33:
  97:Src/adiv5/adiv5.c ****     dest++;
  98:Src/adiv5/adiv5.c ****     src += 4;
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 8


 299              		.loc 1 98 0
 300 0064 0434     		adds	r4, r4, #4
 301              	.LVL34:
  99:Src/adiv5/adiv5.c **** 
 100:Src/adiv5/adiv5.c ****     /* Check for 10 bit address overflow */
 101:Src/adiv5/adiv5.c ****     if ((src ^ osrc) & 0xfffffc00) {
 302              		.loc 1 101 0
 303 0066 88EA0403 		eor	r3, r8, r4
 304 006a 23F47F73 		bic	r3, r3, #1020
 305 006e 23F00303 		bic	r3, r3, #3
 306 0072 002B     		cmp	r3, #0
 307 0074 E7D0     		beq	.L8
 308              	.LVL35:
 102:Src/adiv5/adiv5.c ****       osrc = src;
 103:Src/adiv5/adiv5.c ****       ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_WRITE, ADIV5_AP_TAR, src);
 309              		.loc 1 103 0
 310 0076 3368     		ldr	r3, [r6]
 311 0078 5A68     		ldr	r2, [r3, #4]
 312 007a D2F80C80 		ldr	r8, [r2, #12]
 313 007e 9868     		ldr	r0, [r3, #8]
 314 0080 0094     		str	r4, [sp]
 315 0082 0423     		movs	r3, #4
 316 0084 0022     		movs	r2, #0
 317 0086 0121     		movs	r1, #1
 318 0088 C047     		blx	r8
 319              	.LVL36:
 104:Src/adiv5/adiv5.c ****       ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_READ, ADIV5_AP_DRW, 0);
 320              		.loc 1 104 0
 321 008a 3368     		ldr	r3, [r6]
 322 008c 5A68     		ldr	r2, [r3, #4]
 323 008e D2F80C80 		ldr	r8, [r2, #12]
 324 0092 9868     		ldr	r0, [r3, #8]
 325 0094 0023     		movs	r3, #0
 326 0096 0093     		str	r3, [sp]
 327 0098 0C23     		movs	r3, #12
 328 009a 0122     		movs	r2, #1
 329 009c 1146     		mov	r1, r2
 330 009e C047     		blx	r8
 331              	.LVL37:
 102:Src/adiv5/adiv5.c ****       osrc = src;
 332              		.loc 1 102 0
 333 00a0 A046     		mov	r8, r4
 334 00a2 D0E7     		b	.L8
 335              	.LVL38:
 336              	.L12:
 105:Src/adiv5/adiv5.c ****     }
 106:Src/adiv5/adiv5.c ****   }
 107:Src/adiv5/adiv5.c ****   *dest = ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_DP, ADIV5_LOW_READ, ADIV5_DP_RDBUFF, 0);
 337              		.loc 1 107 0
 338 00a4 3368     		ldr	r3, [r6]
 339 00a6 5A68     		ldr	r2, [r3, #4]
 340 00a8 D568     		ldr	r5, [r2, #12]
 341              	.LVL39:
 342 00aa 9868     		ldr	r0, [r3, #8]
 343 00ac 0024     		movs	r4, #0
 344              	.LVL40:
 345 00ae 0094     		str	r4, [sp]
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 9


 346 00b0 0C23     		movs	r3, #12
 347 00b2 0122     		movs	r2, #1
 348 00b4 2146     		mov	r1, r4
 349 00b6 A847     		blx	r5
 350              	.LVL41:
 351 00b8 3860     		str	r0, [r7]
 108:Src/adiv5/adiv5.c ****   dest++;
 109:Src/adiv5/adiv5.c **** 
 110:Src/adiv5/adiv5.c ****   return 0;
 111:Src/adiv5/adiv5.c **** }
 352              		.loc 1 111 0
 353 00ba 2046     		mov	r0, r4
 354 00bc 03B0     		add	sp, sp, #12
 355              	.LCFI9:
 356              		.cfi_def_cfa_offset 28
 357              		@ sp needed
 358 00be BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 359              		.cfi_endproc
 360              	.LFE138:
 362              		.section	.text.ap_mem_write_words,"ax",%progbits
 363              		.align	1
 364              		.syntax unified
 365              		.thumb
 366              		.thumb_func
 367              		.fpu fpv4-sp-d16
 369              	ap_mem_write_words:
 370              	.LFB140:
 112:Src/adiv5/adiv5.c **** 
 113:Src/adiv5/adiv5.c **** uint32_t ap_mem_read_bytes(ADIv5_AP_PRIV_t *ap, uint8_t *dest, uint32_t src, uint32_t len)
 114:Src/adiv5/adiv5.c **** {
 115:Src/adiv5/adiv5.c ****   uint32_t tmp;
 116:Src/adiv5/adiv5.c **** 	uint32_t osrc = src;
 117:Src/adiv5/adiv5.c ****   len >>= 2;
 118:Src/adiv5/adiv5.c **** 
 119:Src/adiv5/adiv5.c ****   adiv5_ap_write(ap, ADIV5_AP_CSW, ap->csw | ADIV5_AP_CSW_SIZE_BYTE | ADIV5_AP_CSW_ADDRINC_SINGLE);
 120:Src/adiv5/adiv5.c ****   ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_WRITE, ADIV5_AP_TAR, src);
 121:Src/adiv5/adiv5.c ****   ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_READ, ADIV5_AP_DRW, 0);
 122:Src/adiv5/adiv5.c **** 
 123:Src/adiv5/adiv5.c ****   while(--len) {
 124:Src/adiv5/adiv5.c ****     //*dest++ = ...
 125:Src/adiv5/adiv5.c ****     tmp = ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_READ, ADIV5_AP_DRW, 0);
 126:Src/adiv5/adiv5.c ****     *dest = (tmp >> ((src & 0x3) << 3) & 0xFF);
 127:Src/adiv5/adiv5.c ****     dest++;
 128:Src/adiv5/adiv5.c ****     src++;
 129:Src/adiv5/adiv5.c **** 
 130:Src/adiv5/adiv5.c ****     /* Check for 10 bit address overflow */
 131:Src/adiv5/adiv5.c ****     if ((src ^ osrc) & 0xfffffc00) {
 132:Src/adiv5/adiv5.c ****       osrc = src;
 133:Src/adiv5/adiv5.c ****       ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_WRITE, ADIV5_AP_TAR, src);
 134:Src/adiv5/adiv5.c ****       ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_READ, ADIV5_AP_DRW, 0);
 135:Src/adiv5/adiv5.c ****     }
 136:Src/adiv5/adiv5.c ****   }
 137:Src/adiv5/adiv5.c ****   tmp = ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_DP, ADIV5_LOW_READ, ADIV5_AP_DRW, 0);
 138:Src/adiv5/adiv5.c ****   *dest = (tmp >> ((src & 0x3) << 3) & 0xFF);
 139:Src/adiv5/adiv5.c ****   dest++;
 140:Src/adiv5/adiv5.c **** 
 141:Src/adiv5/adiv5.c ****   return 0;
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 10


 142:Src/adiv5/adiv5.c **** }
 143:Src/adiv5/adiv5.c **** 
 144:Src/adiv5/adiv5.c **** static uint32_t ap_mem_write_words(ADIv5_AP_PRIV_t *ap, uint32_t dest, const uint32_t *src, uint32_
 145:Src/adiv5/adiv5.c **** {
 371              		.loc 1 145 0
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 0
 374              		@ frame_needed = 0, uses_anonymous_args = 0
 375              	.LVL42:
 376 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 377              	.LCFI10:
 378              		.cfi_def_cfa_offset 28
 379              		.cfi_offset 4, -28
 380              		.cfi_offset 5, -24
 381              		.cfi_offset 6, -20
 382              		.cfi_offset 7, -16
 383              		.cfi_offset 8, -12
 384              		.cfi_offset 9, -8
 385              		.cfi_offset 14, -4
 386 0004 83B0     		sub	sp, sp, #12
 387              	.LCFI11:
 388              		.cfi_def_cfa_offset 40
 389 0006 0646     		mov	r6, r0
 390 0008 0C46     		mov	r4, r1
 391 000a 1746     		mov	r7, r2
 392              	.LVL43:
 146:Src/adiv5/adiv5.c **** 	uint32_t odest = dest;
 147:Src/adiv5/adiv5.c ****   len >>= 2;
 393              		.loc 1 147 0
 394 000c 9D08     		lsrs	r5, r3, #2
 395              	.LVL44:
 148:Src/adiv5/adiv5.c **** 
 149:Src/adiv5/adiv5.c ****   adiv5_ap_write(ap, ADIV5_AP_CSW, ap->csw | ADIV5_AP_CSW_SIZE_WORD | ADIV5_AP_CSW_ADDRINC_SINGLE);
 396              		.loc 1 149 0
 397 000e 4269     		ldr	r2, [r0, #20]
 398              	.LVL45:
 399 0010 42F01202 		orr	r2, r2, #18
 400 0014 0021     		movs	r1, #0
 401              	.LVL46:
 402 0016 FFF7FEFF 		bl	adiv5_ap_write
 403              	.LVL47:
 150:Src/adiv5/adiv5.c ****   ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_WRITE, ADIV5_AP_TAR, dest);
 404              		.loc 1 150 0
 405 001a 3368     		ldr	r3, [r6]
 406 001c 5A68     		ldr	r2, [r3, #4]
 407 001e D2F80C80 		ldr	r8, [r2, #12]
 408 0022 9868     		ldr	r0, [r3, #8]
 409 0024 0094     		str	r4, [sp]
 410 0026 0423     		movs	r3, #4
 411 0028 0022     		movs	r2, #0
 412 002a 0121     		movs	r1, #1
 413 002c C047     		blx	r8
 414              	.LVL48:
 146:Src/adiv5/adiv5.c **** 	uint32_t odest = dest;
 415              		.loc 1 146 0
 416 002e A146     		mov	r9, r4
 151:Src/adiv5/adiv5.c **** 
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 11


 152:Src/adiv5/adiv5.c ****   while(len--) {
 417              		.loc 1 152 0
 418 0030 00E0     		b	.L14
 419              	.LVL49:
 420              	.L15:
 153:Src/adiv5/adiv5.c ****     ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_WRITE, ADIV5_AP_DRW, *src);
 154:Src/adiv5/adiv5.c ****     src++;
 155:Src/adiv5/adiv5.c ****     dest += 4;
 156:Src/adiv5/adiv5.c **** 
 157:Src/adiv5/adiv5.c ****     /* Check for 10 bit address overflow */
 158:Src/adiv5/adiv5.c ****     if ((dest ^ odest) & 0xfffffc00) {
 159:Src/adiv5/adiv5.c ****       odest = dest;
 421              		.loc 1 159 0
 422 0032 4546     		mov	r5, r8
 423              	.LVL50:
 424              	.L14:
 152:Src/adiv5/adiv5.c ****     ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_WRITE, ADIV5_AP_DRW, *src);
 425              		.loc 1 152 0
 426 0034 05F1FF38 		add	r8, r5, #-1
 427              	.LVL51:
 428 0038 F5B1     		cbz	r5, .L18
 153:Src/adiv5/adiv5.c ****     ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_WRITE, ADIV5_AP_DRW, *src);
 429              		.loc 1 153 0
 430 003a 3368     		ldr	r3, [r6]
 431 003c 5A68     		ldr	r2, [r3, #4]
 432 003e D568     		ldr	r5, [r2, #12]
 433 0040 9868     		ldr	r0, [r3, #8]
 434 0042 57F8043B 		ldr	r3, [r7], #4
 435              	.LVL52:
 436 0046 0093     		str	r3, [sp]
 437 0048 0C23     		movs	r3, #12
 438 004a 0022     		movs	r2, #0
 439 004c 0121     		movs	r1, #1
 440 004e A847     		blx	r5
 441              	.LVL53:
 155:Src/adiv5/adiv5.c **** 
 442              		.loc 1 155 0
 443 0050 0434     		adds	r4, r4, #4
 444              	.LVL54:
 158:Src/adiv5/adiv5.c ****       odest = dest;
 445              		.loc 1 158 0
 446 0052 89EA0403 		eor	r3, r9, r4
 447 0056 23F47F73 		bic	r3, r3, #1020
 448 005a 23F00303 		bic	r3, r3, #3
 449 005e 002B     		cmp	r3, #0
 450 0060 E7D0     		beq	.L15
 451              	.LVL55:
 160:Src/adiv5/adiv5.c ****       ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_WRITE, ADIV5_AP_TAR, dest);
 452              		.loc 1 160 0
 453 0062 3368     		ldr	r3, [r6]
 454 0064 5A68     		ldr	r2, [r3, #4]
 455 0066 D568     		ldr	r5, [r2, #12]
 456 0068 9868     		ldr	r0, [r3, #8]
 457 006a 0094     		str	r4, [sp]
 458 006c 0423     		movs	r3, #4
 459 006e 0022     		movs	r2, #0
 460 0070 0121     		movs	r1, #1
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 12


 461 0072 A847     		blx	r5
 462              	.LVL56:
 159:Src/adiv5/adiv5.c ****       ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_WRITE, ADIV5_AP_TAR, dest);
 463              		.loc 1 159 0
 464 0074 A146     		mov	r9, r4
 465 0076 DCE7     		b	.L15
 466              	.LVL57:
 467              	.L18:
 161:Src/adiv5/adiv5.c ****     }
 162:Src/adiv5/adiv5.c ****   }
 163:Src/adiv5/adiv5.c **** 
 164:Src/adiv5/adiv5.c ****   return 0;
 165:Src/adiv5/adiv5.c **** }
 468              		.loc 1 165 0
 469 0078 0020     		movs	r0, #0
 470 007a 03B0     		add	sp, sp, #12
 471              	.LCFI12:
 472              		.cfi_def_cfa_offset 28
 473              		@ sp needed
 474 007c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 475              		.cfi_endproc
 476              	.LFE140:
 478              		.section	.text.ap_mem_read_word,"ax",%progbits
 479              		.align	1
 480              		.syntax unified
 481              		.thumb
 482              		.thumb_func
 483              		.fpu fpv4-sp-d16
 485              	ap_mem_read_word:
 486              	.LFB142:
 166:Src/adiv5/adiv5.c **** 
 167:Src/adiv5/adiv5.c **** uint32_t ap_mem_write_bytes(ADIv5_AP_PRIV_t *ap, uint32_t dest, const uint8_t *src, uint32_t len)
 168:Src/adiv5/adiv5.c **** {
 169:Src/adiv5/adiv5.c ****   uint32_t tmp;
 170:Src/adiv5/adiv5.c **** 	uint32_t odest = dest;
 171:Src/adiv5/adiv5.c **** 
 172:Src/adiv5/adiv5.c ****   adiv5_ap_write(ap, ADIV5_AP_CSW, ap->csw | ADIV5_AP_CSW_SIZE_BYTE | ADIV5_AP_CSW_ADDRINC_SINGLE);
 173:Src/adiv5/adiv5.c ****   ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_WRITE, ADIV5_AP_TAR, dest);
 174:Src/adiv5/adiv5.c **** 
 175:Src/adiv5/adiv5.c ****   while(len--) {
 176:Src/adiv5/adiv5.c ****     tmp = (uint32_t)*src << ((dest & 0x3) << 3);
 177:Src/adiv5/adiv5.c ****     ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_WRITE, ADIV5_AP_DRW, tmp);
 178:Src/adiv5/adiv5.c ****     src++;
 179:Src/adiv5/adiv5.c ****     dest++;
 180:Src/adiv5/adiv5.c **** 
 181:Src/adiv5/adiv5.c ****     /* Check for 10 bit address overflow */
 182:Src/adiv5/adiv5.c ****     if ((dest ^ odest) & 0xfffffc00) {
 183:Src/adiv5/adiv5.c ****       odest = dest;
 184:Src/adiv5/adiv5.c ****       ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_WRITE, ADIV5_AP_TAR, dest);
 185:Src/adiv5/adiv5.c ****     }
 186:Src/adiv5/adiv5.c ****   }
 187:Src/adiv5/adiv5.c **** 
 188:Src/adiv5/adiv5.c ****   return 0;
 189:Src/adiv5/adiv5.c **** }
 190:Src/adiv5/adiv5.c **** 
 191:Src/adiv5/adiv5.c **** static uint32_t ap_mem_read_word(ADIv5_AP_PRIV_t *ap, uint32_t addr)
 192:Src/adiv5/adiv5.c **** {
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 13


 487              		.loc 1 192 0
 488              		.cfi_startproc
 489              		@ args = 0, pretend = 0, frame = 0
 490              		@ frame_needed = 0, uses_anonymous_args = 0
 491              	.LVL58:
 492 0000 38B5     		push	{r3, r4, r5, lr}
 493              	.LCFI13:
 494              		.cfi_def_cfa_offset 16
 495              		.cfi_offset 3, -16
 496              		.cfi_offset 4, -12
 497              		.cfi_offset 5, -8
 498              		.cfi_offset 14, -4
 499 0002 0446     		mov	r4, r0
 500 0004 0D46     		mov	r5, r1
 193:Src/adiv5/adiv5.c ****   adiv5_ap_write(ap, ADIV5_AP_CSW, ap->csw | ADIV5_AP_CSW_SIZE_WORD | ADIV5_AP_CSW_ADDRINC_SINGLE);
 501              		.loc 1 193 0
 502 0006 4269     		ldr	r2, [r0, #20]
 503 0008 42F01202 		orr	r2, r2, #18
 504 000c 0021     		movs	r1, #0
 505              	.LVL59:
 506 000e FFF7FEFF 		bl	adiv5_ap_write
 507              	.LVL60:
 194:Src/adiv5/adiv5.c ****   adiv5_ap_write(ap, ADIV5_AP_TAR, addr);
 508              		.loc 1 194 0
 509 0012 2A46     		mov	r2, r5
 510 0014 0421     		movs	r1, #4
 511 0016 2046     		mov	r0, r4
 512 0018 FFF7FEFF 		bl	adiv5_ap_write
 513              	.LVL61:
 195:Src/adiv5/adiv5.c ****   return adiv5_ap_read(ap, ADIV5_AP_DRW);
 514              		.loc 1 195 0
 515 001c 0C21     		movs	r1, #12
 516 001e 2046     		mov	r0, r4
 517 0020 FFF7FEFF 		bl	adiv5_ap_read
 518              	.LVL62:
 196:Src/adiv5/adiv5.c **** }
 519              		.loc 1 196 0
 520 0024 38BD     		pop	{r3, r4, r5, pc}
 521              		.cfi_endproc
 522              	.LFE142:
 524              		.section	.text.ap_mem_write_word,"ax",%progbits
 525              		.align	1
 526              		.syntax unified
 527              		.thumb
 528              		.thumb_func
 529              		.fpu fpv4-sp-d16
 531              	ap_mem_write_word:
 532              	.LFB143:
 197:Src/adiv5/adiv5.c **** 
 198:Src/adiv5/adiv5.c **** static void ap_mem_write_word(ADIv5_AP_PRIV_t *ap, uint32_t addr, uint32_t value)
 199:Src/adiv5/adiv5.c **** {
 533              		.loc 1 199 0
 534              		.cfi_startproc
 535              		@ args = 0, pretend = 0, frame = 0
 536              		@ frame_needed = 0, uses_anonymous_args = 0
 537              	.LVL63:
 538 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 14


 539              	.LCFI14:
 540              		.cfi_def_cfa_offset 16
 541              		.cfi_offset 4, -16
 542              		.cfi_offset 5, -12
 543              		.cfi_offset 6, -8
 544              		.cfi_offset 14, -4
 545 0002 0446     		mov	r4, r0
 546 0004 0E46     		mov	r6, r1
 547 0006 1546     		mov	r5, r2
 200:Src/adiv5/adiv5.c ****   adiv5_ap_write(ap, ADIV5_AP_CSW, ap->csw | ADIV5_AP_CSW_SIZE_WORD | ADIV5_AP_CSW_ADDRINC_SINGLE);
 548              		.loc 1 200 0
 549 0008 4269     		ldr	r2, [r0, #20]
 550              	.LVL64:
 551 000a 42F01202 		orr	r2, r2, #18
 552 000e 0021     		movs	r1, #0
 553              	.LVL65:
 554 0010 FFF7FEFF 		bl	adiv5_ap_write
 555              	.LVL66:
 201:Src/adiv5/adiv5.c ****   adiv5_ap_write(ap, ADIV5_AP_TAR, addr);
 556              		.loc 1 201 0
 557 0014 3246     		mov	r2, r6
 558 0016 0421     		movs	r1, #4
 559 0018 2046     		mov	r0, r4
 560 001a FFF7FEFF 		bl	adiv5_ap_write
 561              	.LVL67:
 202:Src/adiv5/adiv5.c ****   adiv5_ap_write(ap, ADIV5_AP_DRW, value);
 562              		.loc 1 202 0
 563 001e 2A46     		mov	r2, r5
 564 0020 0C21     		movs	r1, #12
 565 0022 2046     		mov	r0, r4
 566 0024 FFF7FEFF 		bl	adiv5_ap_write
 567              	.LVL68:
 203:Src/adiv5/adiv5.c **** }
 568              		.loc 1 203 0
 569 0028 70BD     		pop	{r4, r5, r6, pc}
 570              		.cfi_endproc
 571              	.LFE143:
 573              		.section	.text.adiv5_ap_priv_free,"ax",%progbits
 574              		.align	1
 575              		.syntax unified
 576              		.thumb
 577              		.thumb_func
 578              		.fpu fpv4-sp-d16
 580              	adiv5_ap_priv_free:
 581              	.LFB131:
  36:Src/adiv5/adiv5.c ****   this->priv->dp->ap_count--;
 582              		.loc 1 36 0
 583              		.cfi_startproc
 584              		@ args = 0, pretend = 0, frame = 0
 585              		@ frame_needed = 0, uses_anonymous_args = 0
 586              	.LVL69:
 587 0000 10B5     		push	{r4, lr}
 588              	.LCFI15:
 589              		.cfi_def_cfa_offset 8
 590              		.cfi_offset 4, -8
 591              		.cfi_offset 14, -4
 592 0002 0446     		mov	r4, r0
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 15


  37:Src/adiv5/adiv5.c ****   if(!this->priv->dp->ap_count) {
 593              		.loc 1 37 0
 594 0004 4368     		ldr	r3, [r0, #4]
 595 0006 1A68     		ldr	r2, [r3]
 596 0008 1388     		ldrh	r3, [r2]
 597 000a 013B     		subs	r3, r3, #1
 598 000c 1380     		strh	r3, [r2]	@ movhi
  38:Src/adiv5/adiv5.c ****     this->priv->dp->ops->priv_free(this->priv->dp);
 599              		.loc 1 38 0
 600 000e 4368     		ldr	r3, [r0, #4]
 601 0010 1868     		ldr	r0, [r3]
 602              	.LVL70:
 603 0012 0388     		ldrh	r3, [r0]
 604 0014 13B9     		cbnz	r3, .L24
  39:Src/adiv5/adiv5.c ****   }
 605              		.loc 1 39 0
 606 0016 4368     		ldr	r3, [r0, #4]
 607 0018 1B69     		ldr	r3, [r3, #16]
 608 001a 9847     		blx	r3
 609              	.LVL71:
 610              	.L24:
  41:Src/adiv5/adiv5.c ****   vPortFree(this);
 611              		.loc 1 41 0
 612 001c 6068     		ldr	r0, [r4, #4]
 613 001e FFF7FEFF 		bl	vPortFree
 614              	.LVL72:
  42:Src/adiv5/adiv5.c **** }
 615              		.loc 1 42 0
 616 0022 2046     		mov	r0, r4
 617 0024 FFF7FEFF 		bl	vPortFree
 618              	.LVL73:
  43:Src/adiv5/adiv5.c **** 
 619              		.loc 1 43 0
 620 0028 10BD     		pop	{r4, pc}
 621              		.cfi_endproc
 622              	.LFE131:
 624              		.section	.text.ap_mem_read_bytes,"ax",%progbits
 625              		.align	1
 626              		.global	ap_mem_read_bytes
 627              		.syntax unified
 628              		.thumb
 629              		.thumb_func
 630              		.fpu fpv4-sp-d16
 632              	ap_mem_read_bytes:
 633              	.LFB139:
 114:Src/adiv5/adiv5.c ****   uint32_t tmp;
 634              		.loc 1 114 0
 635              		.cfi_startproc
 636              		@ args = 0, pretend = 0, frame = 0
 637              		@ frame_needed = 0, uses_anonymous_args = 0
 638              	.LVL74:
 639 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 640              	.LCFI16:
 641              		.cfi_def_cfa_offset 28
 642              		.cfi_offset 4, -28
 643              		.cfi_offset 5, -24
 644              		.cfi_offset 6, -20
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 16


 645              		.cfi_offset 7, -16
 646              		.cfi_offset 8, -12
 647              		.cfi_offset 9, -8
 648              		.cfi_offset 14, -4
 649 0004 83B0     		sub	sp, sp, #12
 650              	.LCFI17:
 651              		.cfi_def_cfa_offset 40
 652 0006 0746     		mov	r7, r0
 653 0008 0D46     		mov	r5, r1
 654 000a 1446     		mov	r4, r2
 655              	.LVL75:
 117:Src/adiv5/adiv5.c **** 
 656              		.loc 1 117 0
 657 000c 9E08     		lsrs	r6, r3, #2
 658              	.LVL76:
 119:Src/adiv5/adiv5.c ****   ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_WRITE, ADIV5_AP_TAR, src);
 659              		.loc 1 119 0
 660 000e 4269     		ldr	r2, [r0, #20]
 661              	.LVL77:
 662 0010 42F01002 		orr	r2, r2, #16
 663 0014 0021     		movs	r1, #0
 664              	.LVL78:
 665 0016 FFF7FEFF 		bl	adiv5_ap_write
 666              	.LVL79:
 120:Src/adiv5/adiv5.c ****   ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_READ, ADIV5_AP_DRW, 0);
 667              		.loc 1 120 0
 668 001a 3B68     		ldr	r3, [r7]
 669 001c 5A68     		ldr	r2, [r3, #4]
 670 001e D2F80C80 		ldr	r8, [r2, #12]
 671 0022 9868     		ldr	r0, [r3, #8]
 672 0024 0094     		str	r4, [sp]
 673 0026 0423     		movs	r3, #4
 674 0028 0022     		movs	r2, #0
 675 002a 0121     		movs	r1, #1
 676 002c C047     		blx	r8
 677              	.LVL80:
 121:Src/adiv5/adiv5.c **** 
 678              		.loc 1 121 0
 679 002e 3B68     		ldr	r3, [r7]
 680 0030 5A68     		ldr	r2, [r3, #4]
 681 0032 D2F80C80 		ldr	r8, [r2, #12]
 682 0036 9868     		ldr	r0, [r3, #8]
 683 0038 0023     		movs	r3, #0
 684 003a 0093     		str	r3, [sp]
 685 003c 0C23     		movs	r3, #12
 686 003e 0122     		movs	r2, #1
 687 0040 1146     		mov	r1, r2
 688 0042 C047     		blx	r8
 689              	.LVL81:
 116:Src/adiv5/adiv5.c ****   len >>= 2;
 690              		.loc 1 116 0
 691 0044 A046     		mov	r8, r4
 692              	.LVL82:
 693              	.L27:
 123:Src/adiv5/adiv5.c ****     //*dest++ = ...
 694              		.loc 1 123 0
 695 0046 013E     		subs	r6, r6, #1
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 17


 696              	.LVL83:
 697 0048 30D0     		beq	.L31
 125:Src/adiv5/adiv5.c ****     *dest = (tmp >> ((src & 0x3) << 3) & 0xFF);
 698              		.loc 1 125 0
 699 004a 3B68     		ldr	r3, [r7]
 700 004c 5A68     		ldr	r2, [r3, #4]
 701 004e D2F80C90 		ldr	r9, [r2, #12]
 702 0052 9868     		ldr	r0, [r3, #8]
 703 0054 0023     		movs	r3, #0
 704 0056 0093     		str	r3, [sp]
 705 0058 0C23     		movs	r3, #12
 706 005a 0122     		movs	r2, #1
 707 005c 1146     		mov	r1, r2
 708 005e C847     		blx	r9
 709              	.LVL84:
 126:Src/adiv5/adiv5.c ****     dest++;
 710              		.loc 1 126 0
 711 0060 E300     		lsls	r3, r4, #3
 712 0062 03F01803 		and	r3, r3, #24
 713 0066 D840     		lsrs	r0, r0, r3
 714              	.LVL85:
 715 0068 05F8010B 		strb	r0, [r5], #1
 716              	.LVL86:
 128:Src/adiv5/adiv5.c **** 
 717              		.loc 1 128 0
 718 006c 0134     		adds	r4, r4, #1
 719              	.LVL87:
 131:Src/adiv5/adiv5.c ****       osrc = src;
 720              		.loc 1 131 0
 721 006e 88EA0403 		eor	r3, r8, r4
 722 0072 23F47F73 		bic	r3, r3, #1020
 723 0076 23F00303 		bic	r3, r3, #3
 724 007a 002B     		cmp	r3, #0
 725 007c E3D0     		beq	.L27
 726              	.LVL88:
 133:Src/adiv5/adiv5.c ****       ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_READ, ADIV5_AP_DRW, 0);
 727              		.loc 1 133 0
 728 007e 3B68     		ldr	r3, [r7]
 729 0080 5A68     		ldr	r2, [r3, #4]
 730 0082 D2F80C80 		ldr	r8, [r2, #12]
 731 0086 9868     		ldr	r0, [r3, #8]
 732 0088 0094     		str	r4, [sp]
 733 008a 0423     		movs	r3, #4
 734 008c 0022     		movs	r2, #0
 735 008e 0121     		movs	r1, #1
 736 0090 C047     		blx	r8
 737              	.LVL89:
 134:Src/adiv5/adiv5.c ****     }
 738              		.loc 1 134 0
 739 0092 3B68     		ldr	r3, [r7]
 740 0094 5A68     		ldr	r2, [r3, #4]
 741 0096 D2F80C80 		ldr	r8, [r2, #12]
 742 009a 9868     		ldr	r0, [r3, #8]
 743 009c 0023     		movs	r3, #0
 744 009e 0093     		str	r3, [sp]
 745 00a0 0C23     		movs	r3, #12
 746 00a2 0122     		movs	r2, #1
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 18


 747 00a4 1146     		mov	r1, r2
 748 00a6 C047     		blx	r8
 749              	.LVL90:
 132:Src/adiv5/adiv5.c ****       ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_WRITE, ADIV5_AP_TAR, src);
 750              		.loc 1 132 0
 751 00a8 A046     		mov	r8, r4
 752 00aa CCE7     		b	.L27
 753              	.LVL91:
 754              	.L31:
 137:Src/adiv5/adiv5.c ****   *dest = (tmp >> ((src & 0x3) << 3) & 0xFF);
 755              		.loc 1 137 0
 756 00ac 3B68     		ldr	r3, [r7]
 757 00ae 5A68     		ldr	r2, [r3, #4]
 758 00b0 D768     		ldr	r7, [r2, #12]
 759              	.LVL92:
 760 00b2 9868     		ldr	r0, [r3, #8]
 761 00b4 0026     		movs	r6, #0
 762              	.LVL93:
 763 00b6 0096     		str	r6, [sp]
 764 00b8 0C23     		movs	r3, #12
 765 00ba 0122     		movs	r2, #1
 766 00bc 3146     		mov	r1, r6
 767 00be B847     		blx	r7
 768              	.LVL94:
 138:Src/adiv5/adiv5.c ****   dest++;
 769              		.loc 1 138 0
 770 00c0 E400     		lsls	r4, r4, #3
 771              	.LVL95:
 772 00c2 04F01804 		and	r4, r4, #24
 773 00c6 20FA04F4 		lsr	r4, r0, r4
 774 00ca 2C70     		strb	r4, [r5]
 142:Src/adiv5/adiv5.c **** 
 775              		.loc 1 142 0
 776 00cc 3046     		mov	r0, r6
 777              	.LVL96:
 778 00ce 03B0     		add	sp, sp, #12
 779              	.LCFI18:
 780              		.cfi_def_cfa_offset 28
 781              		@ sp needed
 782 00d0 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 783              		.cfi_endproc
 784              	.LFE139:
 786              		.section	.text.ap_mem_write_bytes,"ax",%progbits
 787              		.align	1
 788              		.global	ap_mem_write_bytes
 789              		.syntax unified
 790              		.thumb
 791              		.thumb_func
 792              		.fpu fpv4-sp-d16
 794              	ap_mem_write_bytes:
 795              	.LFB141:
 168:Src/adiv5/adiv5.c ****   uint32_t tmp;
 796              		.loc 1 168 0
 797              		.cfi_startproc
 798              		@ args = 0, pretend = 0, frame = 0
 799              		@ frame_needed = 0, uses_anonymous_args = 0
 800              	.LVL97:
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 19


 801 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 802              	.LCFI19:
 803              		.cfi_def_cfa_offset 28
 804              		.cfi_offset 4, -28
 805              		.cfi_offset 5, -24
 806              		.cfi_offset 6, -20
 807              		.cfi_offset 7, -16
 808              		.cfi_offset 8, -12
 809              		.cfi_offset 9, -8
 810              		.cfi_offset 14, -4
 811 0004 83B0     		sub	sp, sp, #12
 812              	.LCFI20:
 813              		.cfi_def_cfa_offset 40
 814 0006 0546     		mov	r5, r0
 815 0008 0C46     		mov	r4, r1
 816 000a 1646     		mov	r6, r2
 817 000c 9946     		mov	r9, r3
 818              	.LVL98:
 172:Src/adiv5/adiv5.c ****   ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_WRITE, ADIV5_AP_TAR, dest);
 819              		.loc 1 172 0
 820 000e 4269     		ldr	r2, [r0, #20]
 821              	.LVL99:
 822 0010 42F01002 		orr	r2, r2, #16
 823 0014 0021     		movs	r1, #0
 824              	.LVL100:
 825 0016 FFF7FEFF 		bl	adiv5_ap_write
 826              	.LVL101:
 173:Src/adiv5/adiv5.c **** 
 827              		.loc 1 173 0
 828 001a 2B68     		ldr	r3, [r5]
 829 001c 5A68     		ldr	r2, [r3, #4]
 830 001e D768     		ldr	r7, [r2, #12]
 831 0020 9868     		ldr	r0, [r3, #8]
 832 0022 0094     		str	r4, [sp]
 833 0024 0423     		movs	r3, #4
 834 0026 0022     		movs	r2, #0
 835 0028 0121     		movs	r1, #1
 836 002a B847     		blx	r7
 837              	.LVL102:
 170:Src/adiv5/adiv5.c **** 
 838              		.loc 1 170 0
 839 002c A046     		mov	r8, r4
 175:Src/adiv5/adiv5.c ****     tmp = (uint32_t)*src << ((dest & 0x3) << 3);
 840              		.loc 1 175 0
 841 002e 00E0     		b	.L33
 842              	.LVL103:
 843              	.L34:
 183:Src/adiv5/adiv5.c ****       ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_WRITE, ADIV5_AP_TAR, dest);
 844              		.loc 1 183 0
 845 0030 B946     		mov	r9, r7
 846              	.LVL104:
 847              	.L33:
 175:Src/adiv5/adiv5.c ****     tmp = (uint32_t)*src << ((dest & 0x3) << 3);
 848              		.loc 1 175 0
 849 0032 09F1FF37 		add	r7, r9, #-1
 850              	.LVL105:
 851 0036 B9F1000F 		cmp	r9, #0
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 20


 852 003a 24D0     		beq	.L37
 176:Src/adiv5/adiv5.c ****     ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_WRITE, ADIV5_AP_DRW, tmp);
 853              		.loc 1 176 0
 854 003c 16F8013B 		ldrb	r3, [r6], #1	@ zero_extendqisi2
 855              	.LVL106:
 856 0040 E200     		lsls	r2, r4, #3
 857 0042 02F01802 		and	r2, r2, #24
 858 0046 9340     		lsls	r3, r3, r2
 859              	.LVL107:
 177:Src/adiv5/adiv5.c ****     src++;
 860              		.loc 1 177 0
 861 0048 2A68     		ldr	r2, [r5]
 862 004a 5168     		ldr	r1, [r2, #4]
 863 004c D1F80C90 		ldr	r9, [r1, #12]
 864 0050 9068     		ldr	r0, [r2, #8]
 865 0052 0093     		str	r3, [sp]
 866 0054 0C23     		movs	r3, #12
 867              	.LVL108:
 868 0056 0022     		movs	r2, #0
 869 0058 0121     		movs	r1, #1
 870 005a C847     		blx	r9
 871              	.LVL109:
 179:Src/adiv5/adiv5.c **** 
 872              		.loc 1 179 0
 873 005c 0134     		adds	r4, r4, #1
 874              	.LVL110:
 182:Src/adiv5/adiv5.c ****       odest = dest;
 875              		.loc 1 182 0
 876 005e 88EA0403 		eor	r3, r8, r4
 877 0062 23F47F73 		bic	r3, r3, #1020
 878 0066 23F00303 		bic	r3, r3, #3
 879 006a 002B     		cmp	r3, #0
 880 006c E0D0     		beq	.L34
 881              	.LVL111:
 184:Src/adiv5/adiv5.c ****     }
 882              		.loc 1 184 0
 883 006e 2B68     		ldr	r3, [r5]
 884 0070 5A68     		ldr	r2, [r3, #4]
 885 0072 D2F80C80 		ldr	r8, [r2, #12]
 886 0076 9868     		ldr	r0, [r3, #8]
 887 0078 0094     		str	r4, [sp]
 888 007a 0423     		movs	r3, #4
 889 007c 0022     		movs	r2, #0
 890 007e 0121     		movs	r1, #1
 891 0080 C047     		blx	r8
 892              	.LVL112:
 183:Src/adiv5/adiv5.c ****       ap->dp->ops->low_access(ap->dp->priv, ADIV5_LOW_AP, ADIV5_LOW_WRITE, ADIV5_AP_TAR, dest);
 893              		.loc 1 183 0
 894 0082 A046     		mov	r8, r4
 895 0084 D4E7     		b	.L34
 896              	.LVL113:
 897              	.L37:
 189:Src/adiv5/adiv5.c **** 
 898              		.loc 1 189 0
 899 0086 0020     		movs	r0, #0
 900 0088 03B0     		add	sp, sp, #12
 901              	.LCFI21:
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 21


 902              		.cfi_def_cfa_offset 28
 903              		@ sp needed
 904 008a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 905              		.cfi_endproc
 906              	.LFE141:
 908              		.section	.text.ap_mem_read_halfword,"ax",%progbits
 909              		.align	1
 910              		.global	ap_mem_read_halfword
 911              		.syntax unified
 912              		.thumb
 913              		.thumb_func
 914              		.fpu fpv4-sp-d16
 916              	ap_mem_read_halfword:
 917              	.LFB144:
 204:Src/adiv5/adiv5.c **** 
 205:Src/adiv5/adiv5.c **** uint16_t ap_mem_read_halfword(ADIv5_AP_PRIV_t *ap, uint32_t addr)
 206:Src/adiv5/adiv5.c **** {
 918              		.loc 1 206 0
 919              		.cfi_startproc
 920              		@ args = 0, pretend = 0, frame = 0
 921              		@ frame_needed = 0, uses_anonymous_args = 0
 922              	.LVL114:
 923 0000 38B5     		push	{r3, r4, r5, lr}
 924              	.LCFI22:
 925              		.cfi_def_cfa_offset 16
 926              		.cfi_offset 3, -16
 927              		.cfi_offset 4, -12
 928              		.cfi_offset 5, -8
 929              		.cfi_offset 14, -4
 930 0002 0446     		mov	r4, r0
 931 0004 0D46     		mov	r5, r1
 207:Src/adiv5/adiv5.c ****   uint32_t v;
 208:Src/adiv5/adiv5.c **** 
 209:Src/adiv5/adiv5.c ****   adiv5_ap_write(ap, ADIV5_AP_CSW, ap->csw | ADIV5_AP_CSW_SIZE_HALFWORD | ADIV5_AP_CSW_ADDRINC_SING
 932              		.loc 1 209 0
 933 0006 4269     		ldr	r2, [r0, #20]
 934 0008 42F01102 		orr	r2, r2, #17
 935 000c 0021     		movs	r1, #0
 936              	.LVL115:
 937 000e FFF7FEFF 		bl	adiv5_ap_write
 938              	.LVL116:
 210:Src/adiv5/adiv5.c ****   adiv5_ap_write(ap, ADIV5_AP_TAR, addr);
 939              		.loc 1 210 0
 940 0012 2A46     		mov	r2, r5
 941 0014 0421     		movs	r1, #4
 942 0016 2046     		mov	r0, r4
 943 0018 FFF7FEFF 		bl	adiv5_ap_write
 944              	.LVL117:
 211:Src/adiv5/adiv5.c ****   v = adiv5_ap_read(ap, ADIV5_AP_DRW);
 945              		.loc 1 211 0
 946 001c 0C21     		movs	r1, #12
 947 001e 2046     		mov	r0, r4
 948 0020 FFF7FEFF 		bl	adiv5_ap_read
 949              	.LVL118:
 212:Src/adiv5/adiv5.c ****   if (addr & 2) {
 950              		.loc 1 212 0
 951 0024 15F0020F 		tst	r5, #2
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 22


 952 0028 01D1     		bne	.L42
 213:Src/adiv5/adiv5.c ****     return v >> 16;
 214:Src/adiv5/adiv5.c ****   } else {
 215:Src/adiv5/adiv5.c ****     return v & 0xFFFF;
 953              		.loc 1 215 0
 954 002a 80B2     		uxth	r0, r0
 955              	.LVL119:
 956              	.L40:
 216:Src/adiv5/adiv5.c ****   }
 217:Src/adiv5/adiv5.c **** }
 957              		.loc 1 217 0
 958 002c 38BD     		pop	{r3, r4, r5, pc}
 959              	.LVL120:
 960              	.L42:
 213:Src/adiv5/adiv5.c ****     return v >> 16;
 961              		.loc 1 213 0
 962 002e 000C     		lsrs	r0, r0, #16
 963              	.LVL121:
 964 0030 FCE7     		b	.L40
 965              		.cfi_endproc
 966              	.LFE144:
 968              		.section	.text.ap_mem_write_halfword,"ax",%progbits
 969              		.align	1
 970              		.global	ap_mem_write_halfword
 971              		.syntax unified
 972              		.thumb
 973              		.thumb_func
 974              		.fpu fpv4-sp-d16
 976              	ap_mem_write_halfword:
 977              	.LFB145:
 218:Src/adiv5/adiv5.c **** 
 219:Src/adiv5/adiv5.c **** void ap_mem_write_halfword(ADIv5_AP_PRIV_t *ap, uint32_t addr, uint16_t value)
 220:Src/adiv5/adiv5.c **** {
 978              		.loc 1 220 0
 979              		.cfi_startproc
 980              		@ args = 0, pretend = 0, frame = 0
 981              		@ frame_needed = 0, uses_anonymous_args = 0
 982              	.LVL122:
 983 0000 70B5     		push	{r4, r5, r6, lr}
 984              	.LCFI23:
 985              		.cfi_def_cfa_offset 16
 986              		.cfi_offset 4, -16
 987              		.cfi_offset 5, -12
 988              		.cfi_offset 6, -8
 989              		.cfi_offset 14, -4
 990 0002 0446     		mov	r4, r0
 991 0004 0E46     		mov	r6, r1
 992 0006 1546     		mov	r5, r2
 993              	.LVL123:
 221:Src/adiv5/adiv5.c ****   uint32_t v = value;
 222:Src/adiv5/adiv5.c ****   if (addr & 2) {
 994              		.loc 1 222 0
 995 0008 11F0020F 		tst	r1, #2
 996 000c 00D0     		beq	.L44
 223:Src/adiv5/adiv5.c ****     v <<= 16;
 997              		.loc 1 223 0
 998 000e 1504     		lsls	r5, r2, #16
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 23


 999              	.LVL124:
 1000              	.L44:
 224:Src/adiv5/adiv5.c ****   }
 225:Src/adiv5/adiv5.c **** 
 226:Src/adiv5/adiv5.c ****   adiv5_ap_write(ap, ADIV5_AP_CSW, ap->csw | ADIV5_AP_CSW_SIZE_HALFWORD | ADIV5_AP_CSW_ADDRINC_SING
 1001              		.loc 1 226 0
 1002 0010 6269     		ldr	r2, [r4, #20]
 1003              	.LVL125:
 1004 0012 42F01102 		orr	r2, r2, #17
 1005 0016 0021     		movs	r1, #0
 1006              	.LVL126:
 1007 0018 2046     		mov	r0, r4
 1008              	.LVL127:
 1009 001a FFF7FEFF 		bl	adiv5_ap_write
 1010              	.LVL128:
 227:Src/adiv5/adiv5.c ****   adiv5_ap_write(ap, ADIV5_AP_TAR, addr);
 1011              		.loc 1 227 0
 1012 001e 3246     		mov	r2, r6
 1013 0020 0421     		movs	r1, #4
 1014 0022 2046     		mov	r0, r4
 1015 0024 FFF7FEFF 		bl	adiv5_ap_write
 1016              	.LVL129:
 228:Src/adiv5/adiv5.c ****   adiv5_ap_write(ap, ADIV5_AP_DRW, v);
 1017              		.loc 1 228 0
 1018 0028 2A46     		mov	r2, r5
 1019 002a 0C21     		movs	r1, #12
 1020 002c 2046     		mov	r0, r4
 1021 002e FFF7FEFF 		bl	adiv5_ap_write
 1022              	.LVL130:
 229:Src/adiv5/adiv5.c **** }
 1023              		.loc 1 229 0
 1024 0032 70BD     		pop	{r4, r5, r6, pc}
 1025              		.cfi_endproc
 1026              	.LFE145:
 1028              		.section	.text.adiv5_init,"ax",%progbits
 1029              		.align	1
 1030              		.global	adiv5_init
 1031              		.syntax unified
 1032              		.thumb
 1033              		.thumb_func
 1034              		.fpu fpv4-sp-d16
 1036              	adiv5_init:
 1037              	.LFB146:
 230:Src/adiv5/adiv5.c **** 
 231:Src/adiv5/adiv5.c **** 
 232:Src/adiv5/adiv5.c **** static ADIv5_AP_OPS_t adiv5_ap_ops = {
 233:Src/adiv5/adiv5.c ****   ap_mem_read_word,
 234:Src/adiv5/adiv5.c ****   ap_mem_write_word,
 235:Src/adiv5/adiv5.c ****   ap_mem_read_words,
 236:Src/adiv5/adiv5.c ****   ap_mem_write_words,
 237:Src/adiv5/adiv5.c ****   ap_check_error,
 238:Src/adiv5/adiv5.c **** 
 239:Src/adiv5/adiv5.c ****   adiv5_ap_priv_free
 240:Src/adiv5/adiv5.c **** };
 241:Src/adiv5/adiv5.c **** 
 242:Src/adiv5/adiv5.c **** uint16_t adiv5_init(ADIv5_DP_t *dp_low_level)
 243:Src/adiv5/adiv5.c **** {
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 24


 1038              		.loc 1 243 0
 1039              		.cfi_startproc
 1040              		@ args = 0, pretend = 0, frame = 0
 1041              		@ frame_needed = 0, uses_anonymous_args = 0
 1042              	.LVL131:
 1043 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1044              	.LCFI24:
 1045              		.cfi_def_cfa_offset 24
 1046              		.cfi_offset 3, -24
 1047              		.cfi_offset 4, -20
 1048              		.cfi_offset 5, -16
 1049              		.cfi_offset 6, -12
 1050              		.cfi_offset 7, -8
 1051              		.cfi_offset 14, -4
 1052 0002 0646     		mov	r6, r0
 244:Src/adiv5/adiv5.c ****   uint32_t ctrlstat;
 245:Src/adiv5/adiv5.c ****   ctrlstat = dp_low_level->ops->dp_read(dp_low_level->priv, ADIV5_DP_CTRLSTAT);
 1053              		.loc 1 245 0
 1054 0004 4368     		ldr	r3, [r0, #4]
 1055 0006 5B68     		ldr	r3, [r3, #4]
 1056 0008 0421     		movs	r1, #4
 1057 000a 8068     		ldr	r0, [r0, #8]
 1058              	.LVL132:
 1059 000c 9847     		blx	r3
 1060              	.LVL133:
 246:Src/adiv5/adiv5.c **** 
 247:Src/adiv5/adiv5.c ****   /* Write request for system and debug power up */
 248:Src/adiv5/adiv5.c ****   dp_low_level->ops->dp_write(dp_low_level->priv, ADIV5_DP_CTRLSTAT,
 1061              		.loc 1 248 0
 1062 000e 7368     		ldr	r3, [r6, #4]
 1063 0010 1B68     		ldr	r3, [r3]
 1064              	.LVL134:
 1065 0012 40F0A042 		orr	r2, r0, #1342177280
 1066              	.LVL135:
 1067 0016 0421     		movs	r1, #4
 1068 0018 B068     		ldr	r0, [r6, #8]
 1069 001a 9847     		blx	r3
 1070              	.LVL136:
 1071              	.L47:
 249:Src/adiv5/adiv5.c ****        ctrlstat |= ADIV5_DP_CTRLSTAT_CSYSPWRUPREQ | ADIV5_DP_CTRLSTAT_CDBGPWRUPREQ);
 250:Src/adiv5/adiv5.c ****   /* Wait for acknowledge */
 251:Src/adiv5/adiv5.c ****   while(((ctrlstat = dp_low_level->ops->dp_read(dp_low_level->priv, ADIV5_DP_CTRLSTAT)) & 
 1072              		.loc 1 251 0 discriminator 1
 1073 001c 7368     		ldr	r3, [r6, #4]
 1074 001e 5B68     		ldr	r3, [r3, #4]
 1075 0020 0421     		movs	r1, #4
 1076 0022 B068     		ldr	r0, [r6, #8]
 1077 0024 9847     		blx	r3
 1078              	.LVL137:
 1079 0026 00F02040 		and	r0, r0, #-1610612736
 1080              	.LVL138:
 1081 002a B0F1204F 		cmp	r0, #-1610612736
 1082 002e F5D1     		bne	.L47
 1083              	.LBB20:
 252:Src/adiv5/adiv5.c ****                   (ADIV5_DP_CTRLSTAT_CSYSPWRUPACK | ADIV5_DP_CTRLSTAT_CDBGPWRUPACK)) !=
 253:Src/adiv5/adiv5.c ****                   (ADIV5_DP_CTRLSTAT_CSYSPWRUPACK | ADIV5_DP_CTRLSTAT_CDBGPWRUPACK));
 254:Src/adiv5/adiv5.c **** 
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 25


 255:Src/adiv5/adiv5.c **** #if 0
 256:Src/adiv5/adiv5.c ****   /* This AP reset logic is described in ADIv5, but fails to work
 257:Src/adiv5/adiv5.c ****    * correctly on STM32.  CDBGRSTACK is never asserted, and we
 258:Src/adiv5/adiv5.c ****    * just wait forever.
 259:Src/adiv5/adiv5.c ****    */
 260:Src/adiv5/adiv5.c **** 
 261:Src/adiv5/adiv5.c ****   /* Write request for debug reset */
 262:Src/adiv5/adiv5.c ****   adiv5_dp_write(dp, ADIV5_DP_CTRLSTAT,
 263:Src/adiv5/adiv5.c ****     ctrlstat |= ADIV5_DP_CTRLSTAT_CDBGRSTREQ);
 264:Src/adiv5/adiv5.c ****   /* Wait for acknowledge */
 265:Src/adiv5/adiv5.c ****   while(!((ctrlstat = adiv5_dp_read(dp, ADIV5_DP_CTRLSTAT)) & ADIV5_DP_CTRLSTAT_CDBGRSTACK));
 266:Src/adiv5/adiv5.c **** 
 267:Src/adiv5/adiv5.c ****   /* Write request for debug reset release */
 268:Src/adiv5/adiv5.c ****   adiv5_dp_write(dp, ADIV5_DP_CTRLSTAT,
 269:Src/adiv5/adiv5.c ****   ctrlstat &= ~ADIV5_DP_CTRLSTAT_CDBGRSTREQ);
 270:Src/adiv5/adiv5.c ****   /* Wait for acknowledge */
 271:Src/adiv5/adiv5.c ****   while(adiv5_dp_read(dp, ADIV5_DP_CTRLSTAT) & ADIV5_DP_CTRLSTAT_CDBGRSTACK);
 272:Src/adiv5/adiv5.c **** #endif
 273:Src/adiv5/adiv5.c **** 
 274:Src/adiv5/adiv5.c ****   /* Probe for APs on this DP */
 275:Src/adiv5/adiv5.c ****   for(int i = 0; i < 256; i++) {
 1084              		.loc 1 275 0
 1085 0030 0027     		movs	r7, #0
 1086 0032 05E0     		b	.L48
 1087              	.LVL139:
 1088              	.L54:
 1089              	.LBB21:
 276:Src/adiv5/adiv5.c ****     printf("Probe %d AP\n", i);
 277:Src/adiv5/adiv5.c ****     ADIv5_AP_PRIV_t *ap_priv = pvPortMalloc(sizeof(ADIv5_AP_PRIV_t));
 278:Src/adiv5/adiv5.c ****     ap_priv->dp = dp_low_level;
 279:Src/adiv5/adiv5.c ****     ap_priv->apsel = i;
 280:Src/adiv5/adiv5.c ****     ap_priv->idr = adiv5_ap_read(ap_priv, ADIV5_AP_IDR);
 281:Src/adiv5/adiv5.c ****     if(!ap_priv->idr) {
 282:Src/adiv5/adiv5.c ****       /* IDR Invalid - Should we not continue here? */
 283:Src/adiv5/adiv5.c ****       vPortFree(ap_priv);
 1090              		.loc 1 283 0
 1091 0034 2846     		mov	r0, r5
 1092 0036 FFF7FEFF 		bl	vPortFree
 1093              	.LVL140:
 1094              	.L50:
 1095              	.LBE21:
 1096              	.LBE20:
 284:Src/adiv5/adiv5.c ****       break;
 285:Src/adiv5/adiv5.c ****     }
 286:Src/adiv5/adiv5.c **** 
 287:Src/adiv5/adiv5.c ****     dp_low_level->ap_count++;
 288:Src/adiv5/adiv5.c **** 
 289:Src/adiv5/adiv5.c ****     ADIv5_AP_t *ap = pvPortMalloc(sizeof(ADIv5_AP_t));
 290:Src/adiv5/adiv5.c ****     ap->ops = &adiv5_ap_ops;
 291:Src/adiv5/adiv5.c ****     ap->priv = ap_priv;
 292:Src/adiv5/adiv5.c ****     ap->priv->cfg = adiv5_ap_read(ap->priv, ADIV5_AP_CFG);
 293:Src/adiv5/adiv5.c ****     ap->priv->base = adiv5_ap_read(ap->priv, ADIV5_AP_BASE);
 294:Src/adiv5/adiv5.c ****     ap->priv->csw = adiv5_ap_read(ap->priv, ADIV5_AP_CSW) & ~(ADIV5_AP_CSW_SIZE_MASK | ADIV5_AP_CSW
 295:Src/adiv5/adiv5.c **** 
 296:Src/adiv5/adiv5.c ****     /* Currently only CortexM is supported */
 297:Src/adiv5/adiv5.c ****     if(!probe_cortexm(ap)) {
 298:Src/adiv5/adiv5.c ****       // probed unsuccessful, free ap
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 26


 299:Src/adiv5/adiv5.c ****       dp_low_level->ap_count--;
 300:Src/adiv5/adiv5.c ****       vPortFree(ap->priv);
 301:Src/adiv5/adiv5.c ****       vPortFree(ap);
 302:Src/adiv5/adiv5.c ****     }
 303:Src/adiv5/adiv5.c ****   }
 304:Src/adiv5/adiv5.c **** 
 305:Src/adiv5/adiv5.c ****   return dp_low_level->ap_count;
 306:Src/adiv5/adiv5.c **** }
 1097              		.loc 1 306 0
 1098 003a 3088     		ldrh	r0, [r6]
 1099 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1100              	.LVL141:
 1101              	.L51:
 1102              	.LBB23:
 275:Src/adiv5/adiv5.c ****     printf("Probe %d AP\n", i);
 1103              		.loc 1 275 0 discriminator 2
 1104 003e 0137     		adds	r7, r7, #1
 1105              	.LVL142:
 1106              	.L48:
 275:Src/adiv5/adiv5.c ****     printf("Probe %d AP\n", i);
 1107              		.loc 1 275 0 is_stmt 0 discriminator 1
 1108 0040 FF2F     		cmp	r7, #255
 1109 0042 FADC     		bgt	.L50
 1110              	.LBB22:
 276:Src/adiv5/adiv5.c ****     printf("Probe %d AP\n", i);
 1111              		.loc 1 276 0 is_stmt 1
 1112 0044 3946     		mov	r1, r7
 1113 0046 1D48     		ldr	r0, .L55
 1114 0048 FFF7FEFF 		bl	printf
 1115              	.LVL143:
 277:Src/adiv5/adiv5.c ****     ap_priv->dp = dp_low_level;
 1116              		.loc 1 277 0
 1117 004c 1820     		movs	r0, #24
 1118 004e FFF7FEFF 		bl	pvPortMalloc
 1119              	.LVL144:
 1120 0052 0546     		mov	r5, r0
 1121              	.LVL145:
 278:Src/adiv5/adiv5.c ****     ap_priv->apsel = i;
 1122              		.loc 1 278 0
 1123 0054 0660     		str	r6, [r0]
 279:Src/adiv5/adiv5.c ****     ap_priv->idr = adiv5_ap_read(ap_priv, ADIV5_AP_IDR);
 1124              		.loc 1 279 0
 1125 0056 0771     		strb	r7, [r0, #4]
 280:Src/adiv5/adiv5.c ****     if(!ap_priv->idr) {
 1126              		.loc 1 280 0
 1127 0058 FC21     		movs	r1, #252
 1128 005a FFF7FEFF 		bl	adiv5_ap_read
 1129              	.LVL146:
 1130 005e A860     		str	r0, [r5, #8]
 281:Src/adiv5/adiv5.c ****       /* IDR Invalid - Should we not continue here? */
 1131              		.loc 1 281 0
 1132 0060 0028     		cmp	r0, #0
 1133 0062 E7D0     		beq	.L54
 287:Src/adiv5/adiv5.c **** 
 1134              		.loc 1 287 0
 1135 0064 3388     		ldrh	r3, [r6]
 1136 0066 0133     		adds	r3, r3, #1
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 27


 1137 0068 3380     		strh	r3, [r6]	@ movhi
 289:Src/adiv5/adiv5.c ****     ap->ops = &adiv5_ap_ops;
 1138              		.loc 1 289 0
 1139 006a 0820     		movs	r0, #8
 1140 006c FFF7FEFF 		bl	pvPortMalloc
 1141              	.LVL147:
 1142 0070 0446     		mov	r4, r0
 1143              	.LVL148:
 290:Src/adiv5/adiv5.c ****     ap->priv = ap_priv;
 1144              		.loc 1 290 0
 1145 0072 134B     		ldr	r3, .L55+4
 1146 0074 0360     		str	r3, [r0]
 291:Src/adiv5/adiv5.c ****     ap->priv->cfg = adiv5_ap_read(ap->priv, ADIV5_AP_CFG);
 1147              		.loc 1 291 0
 1148 0076 4560     		str	r5, [r0, #4]
 292:Src/adiv5/adiv5.c ****     ap->priv->base = adiv5_ap_read(ap->priv, ADIV5_AP_BASE);
 1149              		.loc 1 292 0
 1150 0078 F421     		movs	r1, #244
 1151 007a 2846     		mov	r0, r5
 1152              	.LVL149:
 1153 007c FFF7FEFF 		bl	adiv5_ap_read
 1154              	.LVL150:
 1155 0080 E860     		str	r0, [r5, #12]
 293:Src/adiv5/adiv5.c ****     ap->priv->csw = adiv5_ap_read(ap->priv, ADIV5_AP_CSW) & ~(ADIV5_AP_CSW_SIZE_MASK | ADIV5_AP_CSW
 1156              		.loc 1 293 0
 1157 0082 6568     		ldr	r5, [r4, #4]
 1158              	.LVL151:
 1159 0084 F821     		movs	r1, #248
 1160 0086 2846     		mov	r0, r5
 1161 0088 FFF7FEFF 		bl	adiv5_ap_read
 1162              	.LVL152:
 1163 008c 2861     		str	r0, [r5, #16]
 294:Src/adiv5/adiv5.c **** 
 1164              		.loc 1 294 0
 1165 008e 0021     		movs	r1, #0
 1166 0090 6068     		ldr	r0, [r4, #4]
 1167 0092 FFF7FEFF 		bl	adiv5_ap_read
 1168              	.LVL153:
 1169 0096 6368     		ldr	r3, [r4, #4]
 1170 0098 20F03700 		bic	r0, r0, #55
 1171 009c 5861     		str	r0, [r3, #20]
 297:Src/adiv5/adiv5.c ****       // probed unsuccessful, free ap
 1172              		.loc 1 297 0
 1173 009e 2046     		mov	r0, r4
 1174 00a0 FFF7FEFF 		bl	probe_cortexm
 1175              	.LVL154:
 1176 00a4 0028     		cmp	r0, #0
 1177 00a6 CAD1     		bne	.L51
 299:Src/adiv5/adiv5.c ****       vPortFree(ap->priv);
 1178              		.loc 1 299 0
 1179 00a8 3388     		ldrh	r3, [r6]
 1180 00aa 013B     		subs	r3, r3, #1
 1181 00ac 3380     		strh	r3, [r6]	@ movhi
 300:Src/adiv5/adiv5.c ****       vPortFree(ap);
 1182              		.loc 1 300 0
 1183 00ae 6068     		ldr	r0, [r4, #4]
 1184 00b0 FFF7FEFF 		bl	vPortFree
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 28


 1185              	.LVL155:
 301:Src/adiv5/adiv5.c ****     }
 1186              		.loc 1 301 0
 1187 00b4 2046     		mov	r0, r4
 1188 00b6 FFF7FEFF 		bl	vPortFree
 1189              	.LVL156:
 1190 00ba C0E7     		b	.L51
 1191              	.L56:
 1192              		.align	2
 1193              	.L55:
 1194 00bc 00000000 		.word	.LC0
 1195 00c0 00000000 		.word	.LANCHOR0
 1196              	.LBE22:
 1197              	.LBE23:
 1198              		.cfi_endproc
 1199              	.LFE146:
 1201              		.section	.data.adiv5_ap_ops,"aw",%progbits
 1202              		.align	2
 1203              		.set	.LANCHOR0,. + 0
 1206              	adiv5_ap_ops:
 1207 0000 00000000 		.word	ap_mem_read_word
 1208 0004 00000000 		.word	ap_mem_write_word
 1209 0008 00000000 		.word	ap_mem_read_words
 1210 000c 00000000 		.word	ap_mem_write_words
 1211 0010 00000000 		.word	ap_check_error
 1212 0014 00000000 		.word	adiv5_ap_priv_free
 1213              		.section	.rodata.adiv5_init.str1.4,"aMS",%progbits,1
 1214              		.align	2
 1215              	.LC0:
 1216 0000 50726F62 		.ascii	"Probe %d AP\012\000"
 1216      65202564 
 1216      2041500A 
 1216      00
 1217              		.text
 1218              	.Letext0:
 1219              		.file 2 "/usr/local/gcc_arm/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_defau
 1220              		.file 3 "/usr/local/gcc_arm/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 1221              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 1222              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1223              		.file 6 "/usr/local/gcc_arm/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/lock.h"
 1224              		.file 7 "/usr/local/gcc_arm/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_types.h"
 1225              		.file 8 "/usr/local/gcc_arm/gcc-arm-none-eabi-7-2017-q4-major/lib/gcc/arm-none-eabi/7.2.1/include/
 1226              		.file 9 "/usr/local/gcc_arm/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/reent.h"
 1227              		.file 10 "Inc/adiv5/adiv5.h"
 1228              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 1229              		.file 12 "/usr/local/gcc_arm/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/stdio.h"
 1230              		.file 13 "Inc/cortexm/cortexm.h"
ARM GAS  /var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s 			page 29


DEFINED SYMBOLS
                            *ABS*:0000000000000000 adiv5.c
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:18     .text.adiv5_ap_write:0000000000000000 $t
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:24     .text.adiv5_ap_write:0000000000000000 adiv5_ap_write
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:96     .text.adiv5_ap_read:0000000000000000 $t
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:102    .text.adiv5_ap_read:0000000000000000 adiv5_ap_read
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:181    .text.ap_check_error:0000000000000000 $t
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:187    .text.ap_check_error:0000000000000000 ap_check_error
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:213    .text.ap_mem_read_words:0000000000000000 $t
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:219    .text.ap_mem_read_words:0000000000000000 ap_mem_read_words
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:363    .text.ap_mem_write_words:0000000000000000 $t
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:369    .text.ap_mem_write_words:0000000000000000 ap_mem_write_words
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:479    .text.ap_mem_read_word:0000000000000000 $t
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:485    .text.ap_mem_read_word:0000000000000000 ap_mem_read_word
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:525    .text.ap_mem_write_word:0000000000000000 $t
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:531    .text.ap_mem_write_word:0000000000000000 ap_mem_write_word
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:574    .text.adiv5_ap_priv_free:0000000000000000 $t
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:580    .text.adiv5_ap_priv_free:0000000000000000 adiv5_ap_priv_free
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:625    .text.ap_mem_read_bytes:0000000000000000 $t
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:632    .text.ap_mem_read_bytes:0000000000000000 ap_mem_read_bytes
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:787    .text.ap_mem_write_bytes:0000000000000000 $t
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:794    .text.ap_mem_write_bytes:0000000000000000 ap_mem_write_bytes
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:909    .text.ap_mem_read_halfword:0000000000000000 $t
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:916    .text.ap_mem_read_halfword:0000000000000000 ap_mem_read_halfword
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:969    .text.ap_mem_write_halfword:0000000000000000 $t
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:976    .text.ap_mem_write_halfword:0000000000000000 ap_mem_write_halfword
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:1029   .text.adiv5_init:0000000000000000 $t
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:1036   .text.adiv5_init:0000000000000000 adiv5_init
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:1194   .text.adiv5_init:00000000000000bc $d
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:1202   .data.adiv5_ap_ops:0000000000000000 $d
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:1206   .data.adiv5_ap_ops:0000000000000000 adiv5_ap_ops
/var/folders/0d/93p3r6493yg7p0rvl_4r983m0000gn/T//cc1ixFNO.s:1214   .rodata.adiv5_init.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
vPortFree
printf
pvPortMalloc
probe_cortexm
